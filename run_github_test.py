#!/usr/bin/env python3
"""
Script para executar teste de integra√ß√£o Amazon Q Developer + GitHub
Simula o processo completo de cria√ß√£o de PR e revis√£o autom√°tica
"""

import os
import subprocess
import sys
from pathlib import Path

def print_header(title):
    print("\n" + "="*70)
    print(f"üéØ {title}")
    print("="*70)

def print_step(step_num, title, description):
    print(f"\nüìã PASSO {step_num}: {title}")
    print(f"üìù {description}")
    print("-" * 50)

def check_git_repo():
    """Verifica se est√° em um reposit√≥rio Git"""
    try:
        subprocess.run(["git", "status"], check=True, capture_output=True)
        return True
    except subprocess.CalledProcessError:
        return False

def setup_git_repo():
    """Configura reposit√≥rio Git se necess√°rio"""
    if not check_git_repo():
        print("üîß Inicializando reposit√≥rio Git...")
        subprocess.run(["git", "init"], check=True)
        subprocess.run(["git", "add", "."], check=True)
        subprocess.run(["git", "commit", "-m", "Initial commit"], check=True)
        return True
    return False

def create_problematic_branch():
    """Cria branch com c√≥digo problem√°tico"""
    print("üåø Criando branch para teste...")
    
    try:
        # Criar nova branch
        subprocess.run(["git", "checkout", "-b", "feature/qa-automation-problematic"], check=True)
        
        # Adicionar arquivos problem√°ticos
        subprocess.run(["git", "add", "test_github_integration.py"], check=True)
        subprocess.run(["git", "add", ".amazonq/"], check=True)
        
        # Commit com problemas intencionais
        commit_message = """feat: Adicionar testes de login automatizados

- Implementar testes Selenium para login
- Adicionar testes de API para usu√°rios
- Configurar estrutura b√°sica de testes

Closes #123"""
        
        subprocess.run(["git", "commit", "-m", commit_message], check=True)
        
        print("‚úÖ Branch criada com c√≥digo problem√°tico")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao criar branch: {e}")
        return False

def simulate_github_integration():
    """Simula a integra√ß√£o com GitHub"""
    print_step(1, "PREPARA√á√ÉO", "Configurando ambiente para teste")
    
    # Verificar arquivos necess√°rios
    required_files = [
        "test_github_integration.py",
        ".amazonq/rules/qa-standards.md",
        "github_integration_test.md"
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Arquivos faltantes: {missing_files}")
        return False
    
    print("‚úÖ Todos os arquivos necess√°rios est√£o presentes")
    
    print_step(2, "REPOSIT√ìRIO GIT", "Configurando controle de vers√£o")
    
    if setup_git_repo():
        print("‚úÖ Reposit√≥rio Git inicializado")
    else:
        print("‚úÖ Reposit√≥rio Git j√° existe")
    
    print_step(3, "BRANCH PROBLEM√ÅTICA", "Criando branch com c√≥digo para revis√£o")
    
    if create_problematic_branch():
        print("‚úÖ Branch criada com sucesso")
    else:
        print("‚ùå Falha ao criar branch")
        return False
    
    print_step(4, "SIMULA√á√ÉO AMAZON Q", "Demonstrando an√°lise autom√°tica")
    
    # Simular an√°lise do Amazon Q Developer
    problems_found = analyze_code_problems()
    display_analysis_results(problems_found)
    
    print_step(5, "PR√ìXIMOS PASSOS", "Instru√ß√µes para GitHub real")
    
    display_github_instructions()
    
    return True

def analyze_code_problems():
    """Simula an√°lise de problemas pelo Amazon Q Developer"""
    problems = [
        {
            "file": "test_github_integration.py",
            "line": 15,
            "type": "timing",
            "severity": "high",
            "message": "Uso de time.sleep() detectado. Recomenda-se WebDriverWait.",
            "suggestion": "Substituir por WebDriverWait com Expected Conditions"
        },
        {
            "file": "test_github_integration.py", 
            "line": 25,
            "type": "selector",
            "severity": "medium",
            "message": "Seletor CSS fr√°gil detectado: '.btn'",
            "suggestion": "Usar seletor mais espec√≠fico como '[data-testid=\"login-button\"]'"
        },
        {
            "file": "test_github_integration.py",
            "line": 35,
            "type": "resource_leak",
            "severity": "high", 
            "message": "WebDriver n√£o est√° sendo fechado adequadamente",
            "suggestion": "Adicionar driver.quit() no teardown ou usar context manager"
        },
        {
            "file": "test_github_integration.py",
            "line": 45,
            "type": "hardcoded_data",
            "severity": "medium",
            "message": "Credenciais hardcoded detectadas",
            "suggestion": "Usar vari√°veis de ambiente ou arquivo de configura√ß√£o"
        },
        {
            "file": "test_github_integration.py",
            "line": 85,
            "type": "api_error_handling",
            "severity": "high",
            "message": "Falta tratamento de erro HTTP",
            "suggestion": "Verificar response.status_code antes de processar JSON"
        }
    ]
    
    return problems

def display_analysis_results(problems):
    """Exibe resultados da an√°lise simulada"""
    print("\nü§ñ AN√ÅLISE AMAZON Q DEVELOPER:")
    print("=" * 50)
    
    severity_colors = {
        "high": "üî¥",
        "medium": "üü°", 
        "low": "üü¢"
    }
    
    for i, problem in enumerate(problems, 1):
        color = severity_colors.get(problem["severity"], "‚ö™")
        print(f"\n{color} PROBLEMA {i}:")
        print(f"   üìÅ Arquivo: {problem['file']}")
        print(f"   üìç Linha: {problem['line']}")
        print(f"   üè∑Ô∏è  Tipo: {problem['type']}")
        print(f"   ‚ö†Ô∏è  Severidade: {problem['severity'].upper()}")
        print(f"   üí¨ Mensagem: {problem['message']}")
        print(f"   üí° Sugest√£o: {problem['suggestion']}")
    
    print(f"\nüìä RESUMO:")
    print(f"   Total de problemas: {len(problems)}")
    print(f"   Alta severidade: {len([p for p in problems if p['severity'] == 'high'])}")
    print(f"   M√©dia severidade: {len([p for p in problems if p['severity'] == 'medium'])}")

def display_github_instructions():
    """Exibe instru√ß√µes para usar no GitHub real"""
    print("\nüöÄ INSTRU√á√ïES PARA GITHUB:")
    print("=" * 50)
    
    instructions = [
        "1. Criar reposit√≥rio no GitHub: 'cogna-qa-automation-test'",
        "2. Instalar Amazon Q Developer: https://github.com/marketplace/amazon-q-developer",
        "3. Fazer push desta branch: git push origin feature/qa-automation-problematic",
        "4. Criar Pull Request no GitHub",
        "5. Aguardar revis√£o autom√°tica do Amazon Q Developer",
        "6. Usar comandos no PR:"
    ]
    
    for instruction in instructions:
        print(f"   {instruction}")
    
    print("\nüí¨ COMANDOS PARA TESTAR NO PR:")
    commands = [
        "/q review - Executar nova revis√£o",
        "/q Como posso melhorar a estabilidade destes testes?",
        "/q Corrija os problemas de timing neste c√≥digo",
        "/q Refatore usando Page Object Model",
        "/q Adicione tratamento de erro adequado"
    ]
    
    for command in commands:
        print(f"   {command}")
    
    print("\nüìã CHECKLIST DE VALIDA√á√ÉO:")
    checklist = [
        "[ ] Amazon Q identificou problemas de timing",
        "[ ] Sugest√µes de WebDriverWait foram fornecidas", 
        "[ ] Problemas de seletores foram detectados",
        "[ ] Corre√ß√µes de resource leak foram sugeridas",
        "[ ] Melhorias de tratamento de erro foram propostas",
        "[ ] C√≥digo refatorado segue padr√µes de qualidade"
    ]
    
    for item in checklist:
        print(f"   {item}")

def main():
    """Executa teste completo de integra√ß√£o"""
    print_header("TESTE DE INTEGRA√á√ÉO: AMAZON Q DEVELOPER + GITHUB")
    print("üéØ Demonstra√ß√£o pr√°tica para time de Qualidade Cogna")
    print("üìñ Baseado na documenta√ß√£o oficial da AWS")
    
    input("\nüé¨ Pressione ENTER para iniciar o teste...")
    
    try:
        if simulate_github_integration():
            print_header("TESTE CONCLU√çDO COM SUCESSO")
            print("‚úÖ Simula√ß√£o executada com sucesso!")
            print("üéØ Pr√≥ximo passo: Executar no GitHub real")
        else:
            print_header("TESTE FALHOU")
            print("‚ùå Problemas durante a execu√ß√£o")
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")

if __name__ == "__main__":
    main()
